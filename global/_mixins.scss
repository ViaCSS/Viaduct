// =============================
// Font Size Mixin
// =============================

// Calculate the REM unit, and return both pixels and REMs to support older browsers.
// Parameter Description:
//
// $value   - The value (in pixels) of the elements property you are setting the REM value for.
// $context - This value is mapped back to the $font-size-base variable set within the _settings.scss partial.
//
// Example Use:
//
// @include font-sizing(32px);
//

@mixin font-sizing($value, $context: $base-font-size, $use-line-height: true) {
    font-size: $value;
    font-size: calc-rem($value, $context);

    @if $use-line-height == true {
        line-height: ceil($value / $base-line-height) * ($base-line-height / $value);
    }
}

// =============================
// Media Query Mixin
// =============================

// Add a media query which has a max-width value of the parameter provided.
// Note - If you would like to implement a mobile first approach, please change max-width to min-width.
// Parameter Description:
//
// $breakpoint - An Integer value of the max-width you would like your media query to cover.
//
// Example Use:
//
// @include media-query(648) {
//     .box {
//         color: red;
//     }
// }
//

@mixin media-query($breakpoint) {
    @media only screen and (min-width: $breakpoint + px) {
    	@content;
    }
}

// =============================
// Generate Spacing Mixin
// =============================

// Generates the output for any spacing properties such as margin and padding.
// Parameter Description:
//
// $property  - A String of the CSS proprty that you would like to target.
// $units     - A Map of units that you would to output.
// $namespace - A String for optional class name.
//
// Example Use:
//
// @include generate-spacing("padding", ("1/2", "2x", "3x", "0"), "desk");
//

@mixin generate-spacing($property: 'padding', $units: ("1/2", "2x", "3x"), $namespace: null) {

    $_important: false;

    @each $unit in $units {

        $full-namespace: spacing-namespace($namespace, $property);

        @if $namespace != null {
            $_important: true;

            @if $property == "margin" {
                [data-#{$namespace}="#{$full-namespace}-#{$unit}"] {
                    @include generate-spacing-single($property, $unit, ('right', 'bottom'), $_important);
                }
            } @else {
                [data-#{$namespace}="#{$full-namespace}-#{$unit}"] {
                    @include generate-spacing-single($property, $unit, ('top', 'right', 'bottom', 'left'), $_important);
                }
            }

        } @else {

            @if $property == "margin" {
                [class~="#{$full-namespace}-#{$unit}"] {
                    @include generate-spacing-single($property, $unit, ('right', 'bottom'), $_important);
                }
            } @else {
                [class~="#{$full-namespace}-#{$unit}"] {
                    @include generate-spacing-single($property, $unit, ('top', 'right', 'bottom', 'left'), $_important);
                }
            }
            
        }

        @each $direction, $positions in $global-spacing-directions {

            @if $direction == false {
                $direction: '';
            } @else {
                $direction: "-#{$direction}";
            }

            @if $namespace != null {
                $_important: true;
                [data-#{$namespace}="#{$full-namespace}#{$direction}-#{$unit}"] {
                    @include generate-spacing-single($property, $unit, $positions, $_important);
                }
            } @else {
                [class~="#{$full-namespace}#{$direction}-#{$unit}"] {
                    @include generate-spacing-single($property, $unit, $positions, $_important);
                }
            }

        }

    }

}

// =============================
// Generate Spacing Single Mixin
// =============================

// A singular instance of spacing properties. Can be used in individual classes to
// generate the calculated properties.
// Parameter Description:
//
// $property   - A String of the CSS proprty that you would like to target.
// $units      - A String of a unit that you would to output.
// $directions - A Map of directions that you would like to output ("top", "right", "bottom", "left").
// $important  - A Boolean for whether the property should be flagged as "!important".
//
// Example Use:
//
// @include generate-spacing-single("margin", "1/2", (top, bottom));
//

@mixin generate-spacing-single($property: 'padding', $unit: "1x", $directions: false, $important: false) {
    @if $important {
        $important: ' !important';
    } @else {
        $important: '';
    }

    @if map-count($directions) > 0 {
        @each $position in $directions {
            #{$property}-#{$position}: spacing-calc($unit)#{$important};
        }
    } @else {
        #{$property}: spacing-calc($unit);
    }
}

// =============================
// Grid Modules Mixin
// =============================

// Generates the main grid/width module classes based on the given viewport values passed.
// Parameter Description:
//
// $viewport-map - Map of viewport values to create.
// $namespace    - String for the optional namespace of created classes.
// $property     - String the element property to create.
//
// Example Use:
//
// Generate Pull Utility Values:
//
// @include grid-percentage-generator('pull', 'right');
//
// Generate Width Utility Values:
//
// @include grid-percentage-generator();
//

@mixin grid-percentage-generator($namespace: false, $property: 'width', $viewport-map: $viewport-values) {

    @each $viewport, $viewport-val in $viewport-map {

        $fullnamespace: '';

        @if $namespace {
            $fullnamespace: "#{$viewport}-#{$namespace}";
        } @else {
            $fullnamespace: "#{$viewport}";
        }

        // Classes only apply once certain breakpoint is triggered.

        @include media-query(nth($viewport-val, 1)) {

            $_cols: nth($viewport-val, 2);

            // Store columns in a map as processed, with global columns added first.
            // Width is the Map key due to Sass limitations and allows is to easily find if it's a pre-existing
            // class to avoid duplicates.

            $col-storage: ();

            // Once created a complete Map of existing columns, loop and output.
            @while $_cols > 1 {

                @for $i from 1 through ($_cols - 1) {

                    // Get the relevent exclusion map based on the current viewport.

                    $excluded: map-get($exclude-viewport-values, $viewport);

                    // Check if current column is found in exclusion map
                    // and don't output if returns true.

                    @if not in-map($i, $excluded) {

                        // Generate the width.

                        $col-width: (100 / $_cols * $i);
                        $width: (percentage($col-width / 100));

                        // Generate the data attribute.

                        $current-attribute: "[data-#{$viewport}=\"#{$fullnamespace}-#{$i}/#{$_cols}\"]";

                        // Empty class for scoping.

                        $new-class: "";

                        // Check if $width is not in $col-storage as a key.
                        // Note: Unquote on insert otherwise $current-attribute will be quoted by default
                        // and will cause output to also be quoted.

                        @if not map-has-key($col-storage, $width) {
                            $new-class: ($width: unquote($current-attribute));
                        } @else {
                            // Get list of matched classes.

                            $attributes: map-get($col-storage, $width);

                            // Append $current-attribute to the $attributes as a comma-seperated list.

                            $new-class: ($width: append(unquote($current-attribute), $attributes, comma));
                        }

                        // Merge the $new-class into the $col-storage.

                        $col-storage: map-merge($col-storage, $new-class);

                    }

                }

                $_cols: $_cols - 1;

            }

            // Output all our created attributes held in $col-storage.

            @each $width, $attributes in $col-storage {

                #{$attributes} {
                    #{$property}: unquote($width) !important;
                }

            }

        }

    }

}
